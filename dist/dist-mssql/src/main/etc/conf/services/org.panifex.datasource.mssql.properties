# Panifex platform
# Copyright (C) 2013  Mario Krizmanic
#  
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or any later version.
  
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
  
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA



# The connection URL to be passed to our JDBC driver to establish a connection  
# See http://jtds.sourceforge.net/faq.html#urlFormat
url=jdbc:jtds:sqlserver://localhost:1433/panifexdb

# The connection username
username=admin

# The connection password
password=1234

# The connection properties that will be sent to our JDBC driver when establishing new connections. 
# Format of the string must be [propertyName=property;]* 
# NOTE - The "username" and "password" properties will be passed explicitly, so they do 
# not need to be included here.
connectionProperties=

# The default auto-commit state of connections created by pool
defaultAutoCommit=true

# The default read-only state of connections created by pool
defaultReadOnly=false

# The default TransactionIsolation state of connections created by pool. One of the following:
# NONE
# READ_COMMITTED
# READ_UNCOMMITTED
# REPEATABLE_READ
# SERIALIZABLE
defaultTransactionIsolation=-1

# The default catalog of connections created by pool
defaultCatalog=

# The initial number of connections that are created when the pool is started
initialSize=0

# The maximum number of active connections that can be allocated from pool at the same time, 
# or negative for no limit
maxActive=8

# The maximum number of connections that can remain idle in the pool, without extra ones 
# being released, or negative for no limit
maxIdle=8

# The minimum number of connections that can remain idle in the pool, without extra ones being 
# created, or zero to create none.
minIdle=0

# The maximum number of milliseconds that the pool will wait (when there are no available connections) 
# for a connection to be returned before throwing an exception, or -1 to wait indefinitely
maxWait=-1

# The SQL query that will be used to validate connections from this pool before returning them to the 
# caller. If specified, this query MUST be an SQL SELECT statement that returns at least one row
validationQuery=select 1

# The indication of whether objects will be validated before being borrowed from the pool. If 
# the object fails to validate, it will be dropped from the pool, and we will attempt to borrow another.
# NOTE - for a true value to have any effect, the validationQuery parameter must be set to a non-null string
testOnBorrow=true

# The indication of whether objects will be validated before being returned to the pool. 
# NOTE - for a true value to have any effect, the validationQuery parameter must be set to a non-null string
testOnReturn=false

# The indication of whether objects will be validated by the idle object evictor (if any). If 
# an object fails to validate, it will be dropped from the pool. 
# NOTE - for a true value to have any effect, the validationQuery parameter must be set to a non-null string.
testWhileIdle=false

# The number of milliseconds to sleep between runs of the idle object evictor thread. When non-positive, 
# no idle object evictor thread will be run
timeBetweenEvictionRunsMillis=-1

# The number of objects to examine during each run of the idle object evictor thread (if any)
numTestsPerEvictionRun=3

# The minimum amount of time an object may sit idle in the pool before it is eligable for eviction by the 
# idle object evictor (if any)
minEvictableIdleTimeMillis=1800000

# Enable prepared statement pooling for this pool
poolPreparedStatements=false

# The maximum number of open statements that can be allocated from the statement pool at the same time, 
# or zero for no limit
maxOpenPreparedStatements=0

# Controls if the PoolGuard allows access to the underlying connection
accessToUnderlyingConnectionAllowed=false

# Flag to remove abandoned connections if they exceed the removeAbandonedTimout.
# If set to true a connection is considered abandoned and eligible for removal if it has been idle longer than 
# the removeAbandonedTimeout. Setting this to true can recover db connections from poorly written applications 
# which fail to close a connection
removeAbandoned=false

# Timeout in seconds before an abandoned connection can be removed
removeAbandonedTimeout=300

# Flag to log stack traces for application code which abandoned a Statement or Connection.
# Logging of abandoned Statements and Connections adds overhead for every Connection open or 
# new Statement because a stack trace has to be generated.
logAbandoned=false